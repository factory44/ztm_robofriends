{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  env: () => env,\n  contextMap: () => contextMap,\n  configContextMap: () => configContextMap,\n  contextSourcesMap: () => contextSourcesMap,\n  sourceHashMap: () => sourceHashMap,\n  NOT_ON_DEMAND: () => NOT_ON_DEMAND,\n  NONE: () => NONE,\n  resolveDebug: () => resolveDebug\n});\nconst _packageJson = /*#__PURE__*/_interopRequireDefault(require(\"../../package.json\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nlet OXIDE_DEFAULT_ENABLED = _packageJson.default.tailwindcss.engine === \"oxide\";\nconst env = {\n  NODE_ENV: process.env.NODE_ENV,\n  DEBUG: resolveDebug(process.env.DEBUG),\n  ENGINE: _packageJson.default.tailwindcss.engine,\n  OXIDE: resolveBoolean(process.env.OXIDE, OXIDE_DEFAULT_ENABLED)\n};\nconst contextMap = new Map();\nconst configContextMap = new Map();\nconst contextSourcesMap = new Map();\nconst sourceHashMap = new Map();\nconst NOT_ON_DEMAND = new String(\"*\");\nconst NONE = Symbol(\"__NONE__\");\nfunction resolveBoolean(value, defaultValue) {\n  if (value === undefined) {\n    return defaultValue;\n  }\n  if (value === \"0\" || value === \"false\") {\n    return false;\n  }\n  return true;\n}\nfunction resolveDebug(debug) {\n  if (debug === undefined) {\n    return false;\n  }\n  // Environment variables are strings, so convert to boolean\n  if (debug === \"true\" || debug === \"1\") {\n    return true;\n  }\n  if (debug === \"false\" || debug === \"0\") {\n    return false;\n  }\n  // Keep the debug convention into account:\n  // DEBUG=* -> This enables all debug modes\n  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n  if (debug === \"*\") {\n    return true;\n  }\n  let debuggers = debug.split(\",\").map(d => d.split(\":\")[0]);\n  // Ignoring tailwindcss\n  if (debuggers.includes(\"-tailwindcss\")) {\n    return false;\n  }\n  // Including tailwindcss\n  if (debuggers.includes(\"tailwindcss\")) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","env","contextMap","configContextMap","contextSourcesMap","sourceHashMap","NOT_ON_DEMAND","NONE","resolveDebug","_packageJson","_interopRequireDefault","require","obj","__esModule","default","OXIDE_DEFAULT_ENABLED","tailwindcss","engine","NODE_ENV","process","DEBUG","ENGINE","OXIDE","resolveBoolean","Map","String","Symbol","defaultValue","undefined","debug","debuggers","split","map","d","includes"],"sources":["/Users/grzegorzlis/Visual_Projects/ztm_web_dev/folder17/robofriends/node_modules/tailwindcss/lib/lib/sharedState.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    env: ()=>env,\n    contextMap: ()=>contextMap,\n    configContextMap: ()=>configContextMap,\n    contextSourcesMap: ()=>contextSourcesMap,\n    sourceHashMap: ()=>sourceHashMap,\n    NOT_ON_DEMAND: ()=>NOT_ON_DEMAND,\n    NONE: ()=>NONE,\n    resolveDebug: ()=>resolveDebug\n});\nconst _packageJson = /*#__PURE__*/ _interopRequireDefault(require(\"../../package.json\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet OXIDE_DEFAULT_ENABLED = _packageJson.default.tailwindcss.engine === \"oxide\";\nconst env = {\n    NODE_ENV: process.env.NODE_ENV,\n    DEBUG: resolveDebug(process.env.DEBUG),\n    ENGINE: _packageJson.default.tailwindcss.engine,\n    OXIDE: resolveBoolean(process.env.OXIDE, OXIDE_DEFAULT_ENABLED)\n};\nconst contextMap = new Map();\nconst configContextMap = new Map();\nconst contextSourcesMap = new Map();\nconst sourceHashMap = new Map();\nconst NOT_ON_DEMAND = new String(\"*\");\nconst NONE = Symbol(\"__NONE__\");\nfunction resolveBoolean(value, defaultValue) {\n    if (value === undefined) {\n        return defaultValue;\n    }\n    if (value === \"0\" || value === \"false\") {\n        return false;\n    }\n    return true;\n}\nfunction resolveDebug(debug) {\n    if (debug === undefined) {\n        return false;\n    }\n    // Environment variables are strings, so convert to boolean\n    if (debug === \"true\" || debug === \"1\") {\n        return true;\n    }\n    if (debug === \"false\" || debug === \"0\") {\n        return false;\n    }\n    // Keep the debug convention into account:\n    // DEBUG=* -> This enables all debug modes\n    // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC\n    // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)\n    // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB\n    if (debug === \"*\") {\n        return true;\n    }\n    let debuggers = debug.split(\",\").map((d)=>d.split(\":\")[0]);\n    // Ignoring tailwindcss\n    if (debuggers.includes(\"-tailwindcss\")) {\n        return false;\n    }\n    // Including tailwindcss\n    if (debuggers.includes(\"tailwindcss\")) {\n        return true;\n    }\n    return false;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACF,SAASC,OAAOA,CAACC,MAAM,EAAEC,GAAG,EAAE;EAC1B,KAAI,IAAIC,IAAI,IAAID,GAAG,EAACN,MAAM,CAACC,cAAc,CAACI,MAAM,EAAEE,IAAI,EAAE;IACpDC,UAAU,EAAE,IAAI;IAChBC,GAAG,EAAEH,GAAG,CAACC,IAAI;EACjB,CAAC,CAAC;AACN;AACAH,OAAO,CAACF,OAAO,EAAE;EACbQ,GAAG,EAAEA,CAAA,KAAIA,GAAG;EACZC,UAAU,EAAEA,CAAA,KAAIA,UAAU;EAC1BC,gBAAgB,EAAEA,CAAA,KAAIA,gBAAgB;EACtCC,iBAAiB,EAAEA,CAAA,KAAIA,iBAAiB;EACxCC,aAAa,EAAEA,CAAA,KAAIA,aAAa;EAChCC,aAAa,EAAEA,CAAA,KAAIA,aAAa;EAChCC,IAAI,EAAEA,CAAA,KAAIA,IAAI;EACdC,YAAY,EAAEA,CAAA,KAAIA;AACtB,CAAC,CAAC;AACF,MAAMC,YAAY,GAAG,aAAcC,sBAAsB,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACxF,SAASD,sBAAsBA,CAACE,GAAG,EAAE;EACjC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IACjCE,OAAO,EAAEF;EACb,CAAC;AACL;AACA,IAAIG,qBAAqB,GAAGN,YAAY,CAACK,OAAO,CAACE,WAAW,CAACC,MAAM,KAAK,OAAO;AAC/E,MAAMhB,GAAG,GAAG;EACRiB,QAAQ,EAAEC,OAAO,CAAClB,GAAG,CAACiB,QAAQ;EAC9BE,KAAK,EAAEZ,YAAY,CAACW,OAAO,CAAClB,GAAG,CAACmB,KAAK,CAAC;EACtCC,MAAM,EAAEZ,YAAY,CAACK,OAAO,CAACE,WAAW,CAACC,MAAM;EAC/CK,KAAK,EAAEC,cAAc,CAACJ,OAAO,CAAClB,GAAG,CAACqB,KAAK,EAAEP,qBAAqB;AAClE,CAAC;AACD,MAAMb,UAAU,GAAG,IAAIsB,GAAG,EAAE;AAC5B,MAAMrB,gBAAgB,GAAG,IAAIqB,GAAG,EAAE;AAClC,MAAMpB,iBAAiB,GAAG,IAAIoB,GAAG,EAAE;AACnC,MAAMnB,aAAa,GAAG,IAAImB,GAAG,EAAE;AAC/B,MAAMlB,aAAa,GAAG,IAAImB,MAAM,CAAC,GAAG,CAAC;AACrC,MAAMlB,IAAI,GAAGmB,MAAM,CAAC,UAAU,CAAC;AAC/B,SAASH,cAAcA,CAAC7B,KAAK,EAAEiC,YAAY,EAAE;EACzC,IAAIjC,KAAK,KAAKkC,SAAS,EAAE;IACrB,OAAOD,YAAY;EACvB;EACA,IAAIjC,KAAK,KAAK,GAAG,IAAIA,KAAK,KAAK,OAAO,EAAE;IACpC,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf;AACA,SAASc,YAAYA,CAACqB,KAAK,EAAE;EACzB,IAAIA,KAAK,KAAKD,SAAS,EAAE;IACrB,OAAO,KAAK;EAChB;EACA;EACA,IAAIC,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,GAAG,EAAE;IACnC,OAAO,IAAI;EACf;EACA,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,GAAG,EAAE;IACpC,OAAO,KAAK;EAChB;EACA;EACA;EACA;EACA;EACA;EACA,IAAIA,KAAK,KAAK,GAAG,EAAE;IACf,OAAO,IAAI;EACf;EACA,IAAIC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAGA,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1D;EACA,IAAID,SAAS,CAACI,QAAQ,CAAC,cAAc,CAAC,EAAE;IACpC,OAAO,KAAK;EAChB;EACA;EACA,IAAIJ,SAAS,CAACI,QAAQ,CAAC,aAAa,CAAC,EAAE;IACnC,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}