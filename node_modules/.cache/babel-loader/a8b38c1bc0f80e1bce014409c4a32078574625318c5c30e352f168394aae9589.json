{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  elementSelectorParser: () => elementSelectorParser,\n  default: () => resolveDefaultsAtRules\n});\nconst _postcss = /*#__PURE__*/_interopRequireDefault(require(\"postcss\"));\nconst _postcssSelectorParser = /*#__PURE__*/_interopRequireDefault(require(\"postcss-selector-parser\"));\nconst _featureFlags = require(\"../featureFlags\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nlet getNode = {\n  id(node) {\n    return _postcssSelectorParser.default.attribute({\n      attribute: \"id\",\n      operator: \"=\",\n      value: node.value,\n      quoteMark: '\"'\n    });\n  }\n};\nfunction minimumImpactSelector(nodes) {\n  let rest = nodes.filter(node => {\n    // Keep non-pseudo nodes\n    if (node.type !== \"pseudo\") return true;\n    // Keep pseudo nodes that have subnodes\n    // E.g.: `:not()` contains subnodes inside the parentheses\n    if (node.nodes.length > 0) return true;\n    // Keep pseudo `elements`\n    // This implicitly means that we ignore pseudo `classes`\n    return node.value.startsWith(\"::\") || [\":before\", \":after\", \":first-line\", \":first-letter\"].includes(node.value);\n  }).reverse();\n  let searchFor = new Set([\"tag\", \"class\", \"id\", \"attribute\"]);\n  let splitPointIdx = rest.findIndex(n => searchFor.has(n.type));\n  if (splitPointIdx === -1) return rest.reverse().join(\"\").trim();\n  let node = rest[splitPointIdx];\n  let bestNode = getNode[node.type] ? getNode[node.type](node) : node;\n  rest = rest.slice(0, splitPointIdx);\n  let combinatorIdx = rest.findIndex(n => n.type === \"combinator\" && n.value === \">\");\n  if (combinatorIdx !== -1) {\n    rest.splice(0, combinatorIdx);\n    rest.unshift(_postcssSelectorParser.default.universal());\n  }\n  return [bestNode, ...rest.reverse()].join(\"\").trim();\n}\nlet elementSelectorParser = (0, _postcssSelectorParser.default)(selectors => {\n  return selectors.map(s => {\n    let nodes = s.split(n => n.type === \"combinator\" && n.value === \" \").pop();\n    return minimumImpactSelector(nodes);\n  });\n});\nlet cache = new Map();\nfunction extractElementSelector(selector) {\n  if (!cache.has(selector)) {\n    cache.set(selector, elementSelectorParser.transformSync(selector));\n  }\n  return cache.get(selector);\n}\nfunction resolveDefaultsAtRules(_ref) {\n  let {\n    tailwindConfig\n  } = _ref;\n  return root => {\n    let variableNodeMap = new Map();\n    /** @type {Set<import('postcss').AtRule>} */\n    let universals = new Set();\n    root.walkAtRules(\"defaults\", rule => {\n      if (rule.nodes && rule.nodes.length > 0) {\n        universals.add(rule);\n        return;\n      }\n      let variable = rule.params;\n      if (!variableNodeMap.has(variable)) {\n        variableNodeMap.set(variable, new Set());\n      }\n      variableNodeMap.get(variable).add(rule.parent);\n      rule.remove();\n    });\n    if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n      for (let universal of universals) {\n        /** @type {Map<string, Set<string>>} */let selectorGroups = new Map();\n        var _variableNodeMap_get;\n        let rules = (_variableNodeMap_get = variableNodeMap.get(universal.params)) !== null && _variableNodeMap_get !== void 0 ? _variableNodeMap_get : [];\n        for (let rule of rules) {\n          for (let selector of extractElementSelector(rule.selector)) {\n            // If selector contains a vendor prefix after a pseudo element or class,\n            // we consider them separately because merging the declarations into\n            // a single rule will cause browsers that do not understand the\n            // vendor prefix to throw out the whole rule\n            let selectorGroupName = selector.includes(\":-\") || selector.includes(\"::-\") ? selector : \"__DEFAULT__\";\n            var _selectorGroups_get;\n            let selectors = (_selectorGroups_get = selectorGroups.get(selectorGroupName)) !== null && _selectorGroups_get !== void 0 ? _selectorGroups_get : new Set();\n            selectorGroups.set(selectorGroupName, selectors);\n            selectors.add(selector);\n          }\n        }\n        if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n          if (selectorGroups.size === 0) {\n            universal.remove();\n            continue;\n          }\n          for (let [, selectors1] of selectorGroups) {\n            let universalRule = _postcss.default.rule({\n              source: universal.source\n            });\n            universalRule.selectors = [...selectors1];\n            universalRule.append(universal.nodes.map(node => node.clone()));\n            universal.before(universalRule);\n          }\n        }\n        universal.remove();\n      }\n    } else if (universals.size) {\n      let universalRule1 = _postcss.default.rule({\n        selectors: [\"*\", \"::before\", \"::after\"]\n      });\n      for (let universal1 of universals) {\n        universalRule1.append(universal1.nodes);\n        if (!universalRule1.parent) {\n          universal1.before(universalRule1);\n        }\n        if (!universalRule1.source) {\n          universalRule1.source = universal1.source;\n        }\n        universal1.remove();\n      }\n      let backdropRule = universalRule1.clone({\n        selectors: [\"::backdrop\"]\n      });\n      universalRule1.after(backdropRule);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_export","target","all","name","enumerable","get","elementSelectorParser","default","resolveDefaultsAtRules","_postcss","_interopRequireDefault","require","_postcssSelectorParser","_featureFlags","obj","__esModule","getNode","id","node","attribute","operator","quoteMark","minimumImpactSelector","nodes","rest","filter","type","length","startsWith","includes","reverse","searchFor","Set","splitPointIdx","findIndex","n","has","join","trim","bestNode","slice","combinatorIdx","splice","unshift","universal","selectors","map","s","split","pop","cache","Map","extractElementSelector","selector","set","transformSync","_ref","tailwindConfig","root","variableNodeMap","universals","walkAtRules","rule","add","variable","params","parent","remove","flagEnabled","selectorGroups","_variableNodeMap_get","rules","selectorGroupName","_selectorGroups_get","size","selectors1","universalRule","source","append","clone","before","universalRule1","universal1","backdropRule","after"],"sources":["/Users/grzegorzlis/Visual_Projects/ztm_web_dev/folder17/robofriends/node_modules/tailwindcss/lib/lib/resolveDefaultsAtRules.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    elementSelectorParser: ()=>elementSelectorParser,\n    default: ()=>resolveDefaultsAtRules\n});\nconst _postcss = /*#__PURE__*/ _interopRequireDefault(require(\"postcss\"));\nconst _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(require(\"postcss-selector-parser\"));\nconst _featureFlags = require(\"../featureFlags\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet getNode = {\n    id (node) {\n        return _postcssSelectorParser.default.attribute({\n            attribute: \"id\",\n            operator: \"=\",\n            value: node.value,\n            quoteMark: '\"'\n        });\n    }\n};\nfunction minimumImpactSelector(nodes) {\n    let rest = nodes.filter((node)=>{\n        // Keep non-pseudo nodes\n        if (node.type !== \"pseudo\") return true;\n        // Keep pseudo nodes that have subnodes\n        // E.g.: `:not()` contains subnodes inside the parentheses\n        if (node.nodes.length > 0) return true;\n        // Keep pseudo `elements`\n        // This implicitly means that we ignore pseudo `classes`\n        return node.value.startsWith(\"::\") || [\n            \":before\",\n            \":after\",\n            \":first-line\",\n            \":first-letter\"\n        ].includes(node.value);\n    }).reverse();\n    let searchFor = new Set([\n        \"tag\",\n        \"class\",\n        \"id\",\n        \"attribute\"\n    ]);\n    let splitPointIdx = rest.findIndex((n)=>searchFor.has(n.type));\n    if (splitPointIdx === -1) return rest.reverse().join(\"\").trim();\n    let node = rest[splitPointIdx];\n    let bestNode = getNode[node.type] ? getNode[node.type](node) : node;\n    rest = rest.slice(0, splitPointIdx);\n    let combinatorIdx = rest.findIndex((n)=>n.type === \"combinator\" && n.value === \">\");\n    if (combinatorIdx !== -1) {\n        rest.splice(0, combinatorIdx);\n        rest.unshift(_postcssSelectorParser.default.universal());\n    }\n    return [\n        bestNode,\n        ...rest.reverse()\n    ].join(\"\").trim();\n}\nlet elementSelectorParser = (0, _postcssSelectorParser.default)((selectors)=>{\n    return selectors.map((s)=>{\n        let nodes = s.split((n)=>n.type === \"combinator\" && n.value === \" \").pop();\n        return minimumImpactSelector(nodes);\n    });\n});\nlet cache = new Map();\nfunction extractElementSelector(selector) {\n    if (!cache.has(selector)) {\n        cache.set(selector, elementSelectorParser.transformSync(selector));\n    }\n    return cache.get(selector);\n}\nfunction resolveDefaultsAtRules({ tailwindConfig  }) {\n    return (root)=>{\n        let variableNodeMap = new Map();\n        /** @type {Set<import('postcss').AtRule>} */ let universals = new Set();\n        root.walkAtRules(\"defaults\", (rule)=>{\n            if (rule.nodes && rule.nodes.length > 0) {\n                universals.add(rule);\n                return;\n            }\n            let variable = rule.params;\n            if (!variableNodeMap.has(variable)) {\n                variableNodeMap.set(variable, new Set());\n            }\n            variableNodeMap.get(variable).add(rule.parent);\n            rule.remove();\n        });\n        if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n            for (let universal of universals){\n                /** @type {Map<string, Set<string>>} */ let selectorGroups = new Map();\n                var _variableNodeMap_get;\n                let rules = (_variableNodeMap_get = variableNodeMap.get(universal.params)) !== null && _variableNodeMap_get !== void 0 ? _variableNodeMap_get : [];\n                for (let rule of rules){\n                    for (let selector of extractElementSelector(rule.selector)){\n                        // If selector contains a vendor prefix after a pseudo element or class,\n                        // we consider them separately because merging the declarations into\n                        // a single rule will cause browsers that do not understand the\n                        // vendor prefix to throw out the whole rule\n                        let selectorGroupName = selector.includes(\":-\") || selector.includes(\"::-\") ? selector : \"__DEFAULT__\";\n                        var _selectorGroups_get;\n                        let selectors = (_selectorGroups_get = selectorGroups.get(selectorGroupName)) !== null && _selectorGroups_get !== void 0 ? _selectorGroups_get : new Set();\n                        selectorGroups.set(selectorGroupName, selectors);\n                        selectors.add(selector);\n                    }\n                }\n                if ((0, _featureFlags.flagEnabled)(tailwindConfig, \"optimizeUniversalDefaults\")) {\n                    if (selectorGroups.size === 0) {\n                        universal.remove();\n                        continue;\n                    }\n                    for (let [, selectors1] of selectorGroups){\n                        let universalRule = _postcss.default.rule({\n                            source: universal.source\n                        });\n                        universalRule.selectors = [\n                            ...selectors1\n                        ];\n                        universalRule.append(universal.nodes.map((node)=>node.clone()));\n                        universal.before(universalRule);\n                    }\n                }\n                universal.remove();\n            }\n        } else if (universals.size) {\n            let universalRule1 = _postcss.default.rule({\n                selectors: [\n                    \"*\",\n                    \"::before\",\n                    \"::after\"\n                ]\n            });\n            for (let universal1 of universals){\n                universalRule1.append(universal1.nodes);\n                if (!universalRule1.parent) {\n                    universal1.before(universalRule1);\n                }\n                if (!universalRule1.source) {\n                    universalRule1.source = universal1.source;\n                }\n                universal1.remove();\n            }\n            let backdropRule = universalRule1.clone({\n                selectors: [\n                    \"::backdrop\"\n                ]\n            });\n            universalRule1.after(backdropRule);\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}